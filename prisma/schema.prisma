generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  email            String      @unique
  name             String?
  createdAt        DateTime    @default(now())
  id               Int         @id @default(autoincrement())
  supabaseUserId   String?     @unique
  avatar           String?
  address          String?
  emergencyContact String?
  phone            String?
  companyAddress   String?
  companyName      String?
  companyPhone     String?
  userType         UserType    @default(WORKER)
  groupLeaderships Group[]     @relation("GroupLeader")
  groups           GroupUser[]
  createdJobs      Job[]       @relation("JobCreator")
  applications     Application[]
}

model Job {
  title        String
  description  String?
  wage         Int
  jobDate      DateTime
  createdAt    DateTime     @default(now())
  id           Int          @id @default(autoincrement())
  maxMembers   Int          @default(10)
  creatorId    Int
  location     String?
  requirements String?
  status       JobStatus    @default(ACTIVE)
  creator      User         @relation("JobCreator", fields: [creatorId], references: [id])
  waitingRoom  WaitingRoom?
  applications Application[]
}

model WaitingRoom {
  id        Int      @id @default(autoincrement())
  jobId     Int      @unique
  createdAt DateTime @default(now())
  isOpen    Boolean  @default(true)
  maxGroups Int      @default(5)
  groups    Group[]
  job       Job      @relation(fields: [jobId], references: [id])
}

model Group {
  createdAt     DateTime      @default(now())
  id            Int           @id @default(autoincrement())
  name          String
  leaderId      Int
  waitingRoomId Int
  applications  Application[]
  leader        User          @relation("GroupLeader", fields: [leaderId], references: [id])
  waitingRoom   WaitingRoom   @relation(fields: [waitingRoomId], references: [id])
  members       GroupUser[]

  @@unique([waitingRoomId, name])
}

model GroupUser {
  id       Int          @id @default(autoincrement())
  groupId  Int
  userId   Int
  joinedAt DateTime     @default(now())
  status   MemberStatus @default(PENDING)
  group    Group        @relation(fields: [groupId], references: [id])
  user     User         @relation(fields: [userId], references: [id])

  @@unique([groupId, userId])
}

model Application {
  submittedAt DateTime          @default(now())
  id          Int               @id @default(autoincrement())
  groupId     Int?
  userId      Int
  jobId       Int
  status      ApplicationStatus @default(SUBMITTED)
  isConfirmed Boolean           @default(false)
  group       Group?            @relation(fields: [groupId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  job         Job               @relation(fields: [jobId], references: [id])
}

enum UserType {
  WORKER
  EMPLOYER
}

enum JobStatus {
  ACTIVE
  PAUSED
  CLOSED
  COMPLETED
}

enum MemberStatus {
  PENDING
  APPLYING
  NOT_APPLYING
}

enum ApplicationStatus {
  SUBMITTED
  APPROVED
  REJECTED
}
